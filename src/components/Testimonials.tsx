
import { Star, Quote, ChevronLeft, ChevronRight } from 'lucide-react';
import { useState, useEffect } from 'react';

const Testimonials = () => {
  const [currentIndex, setCurrentIndex] = useState(0);

  const testimonials = [
    {
      name: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
      role: "–ú–∞–º–∞ —É—á–µ–Ω–∏—Ü—ã (7 –ª–µ—Ç)",
      text: "–ú–∞—Ä–∏—è - –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å! –î–æ—á–∫–∞ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Ö–æ–¥–∏—Ç –Ω–∞ –∑–∞–Ω—è—Ç–∏—è. –ó–∞ –ø–æ–ª–≥–æ–¥–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏–ª—Å—è —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å.",
      rating: 5,
      avatar: "üë©‚Äçüíº"
    },
    {
      name: "–ò–≥–æ—Ä—å –°–∏–¥–æ—Ä–æ–≤",
      role: "–°—Ç—É–¥–µ–Ω—Ç (22 –≥–æ–¥–∞)",
      text: "–ó–∞–Ω–∏–º–∞—é—Å—å –¥–ª—è —Ä–∞–±–æ—Ç—ã. –ú–∞—Ä–∏—è –ø–æ–º–æ–≥–ª–∞ –º–Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º. –û—á–µ–Ω—å –¥–æ–≤–æ–ª—å–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º!",
      rating: 5,
      avatar: "üë®‚Äçüéì"
    },
    {
      name: "–ï–ª–µ–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞",
      role: "–ú–∞–º–∞ —Ä–µ–±–µ–Ω–∫–∞ —Å –†–ê–°",
      text: "–ú–∞—Ä–∏—è –Ω–∞—à–ª–∞ –ø–æ–¥—Ö–æ–¥ –∫ –º–æ–µ–º—É —Å—ã–Ω—É —Å –∞—É—Ç–∏–∑–º–æ–º. –û–Ω –≤–ø–µ—Ä–≤—ã–µ —Å —Ä–∞–¥–æ—Å—Ç—å—é –∏–∑—É—á–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–π. –û–≥—Ä–æ–º–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å!",
      rating: 5,
      avatar: "üë©‚Äçüè´"
    },
    {
      name: "–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤",
      role: "–ë–∏–∑–Ω–µ—Å–º–µ–Ω (35 –ª–µ—Ç)",
      text: "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ–º–æ–≥–ª–∏ –º–Ω–µ —É–ª—É—á—à–∏—Ç—å –¥–µ–ª–æ–≤–æ–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π. –ú–∞—Ä–∏—è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∏—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.",
      rating: 5,
      avatar: "üë®‚Äçüíº"
    },
    {
      name: "–û–ª—å–≥–∞ –°–º–∏—Ä–Ω–æ–≤–∞",
      role: "–ú–∞–º–∞ –±–ª–∏–∑–Ω–µ—Ü–æ–≤ (5 –ª–µ—Ç)",
      text: "–ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –º–æ–∏—Ö –±–ª–∏–∑–Ω–µ—Ü–æ–≤ - —ç—Ç–æ –ø—Ä–∞–∑–¥–Ω–∏–∫! –î–µ—Ç–∏ –æ–±–æ–∂–∞—é—Ç –ú–∞—Ä–∏—é –∏ —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—É—Ç –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞.",
      rating: 5,
      avatar: "üë©‚Äçüëß‚Äçüë¶"
    }
  ];

  const nextSlide = () => {
    setCurrentIndex((prev) => (prev + 1) % testimonials.length);
  };

  const prevSlide = () => {
    setCurrentIndex((prev) => (prev - 1 + testimonials.length) % testimonials.length);
  };

  useEffect(() => {
    const interval = setInterval(nextSlide, 5000);
    return () => clearInterval(interval);
  }, []);

  return (
    <section className="py-20 bg-gradient-to-br from-yellow-50 via-white to-blue-50 relative overflow-hidden">
      {/* Background decoration */}
      <div className="absolute inset-0">
        <div className="absolute top-10 left-20 w-20 h-20 bg-yellow-300/20 rounded-full animate-bounce"></div>
        <div className="absolute bottom-10 right-20 w-16 h-16 bg-blue-300/20 rounded-full animate-bounce delay-200"></div>
        <div className="absolute top-1/2 left-10 w-12 h-12 bg-green-300/20 rounded-full animate-bounce delay-300"></div>
      </div>

      <div className="container mx-auto px-4 relative z-10">
        <div className="text-center mb-16 animate-fade-in">
          <h2 className="text-4xl lg:text-5xl font-bold text-gray-800 mb-6">
            –û—Ç–∑—ã–≤—ã <span className="text-transparent bg-clip-text bg-gradient-to-r from-yellow-500 to-orange-500">—É—á–µ–Ω–∏–∫–æ–≤</span>
          </h2>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            –ß—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –æ –∑–∞–Ω—è—Ç–∏—è—Ö –≤ Yellow Submarine
          </p>
        </div>

        <div className="max-w-4xl mx-auto relative">
          {/* Main testimonial */}
          <div className="bg-white rounded-3xl shadow-2xl p-8 lg:p-12 relative overflow-hidden animate-fade-in">
            {/* Quote decoration */}
            <Quote className="absolute top-8 left-8 w-12 h-12 text-yellow-300/50" />
            
            <div className="relative z-10">
              <div className="flex items-center justify-center mb-6">
                {[...Array(testimonials[currentIndex].rating)].map((_, i) => (
                  <Star key={i} className="w-6 h-6 text-yellow-500 fill-current mr-1" />
                ))}
              </div>
              
              <p className="text-xl lg:text-2xl text-gray-700 text-center leading-relaxed mb-8 italic">
                "{testimonials[currentIndex].text}"
              </p>
              
              <div className="flex items-center justify-center space-x-4">
                <div className="w-16 h-16 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full flex items-center justify-center text-2xl">
                  {testimonials[currentIndex].avatar}
                </div>
                <div className="text-center">
                  <h4 className="text-lg font-bold text-gray-800">{testimonials[currentIndex].name}</h4>
                  <p className="text-gray-600">{testimonials[currentIndex].role}</p>
                </div>
              </div>
            </div>
          </div>

          {/* Navigation */}
          <div className="flex justify-center items-center mt-8 space-x-4">
            <button
              onClick={prevSlide}
              className="w-12 h-12 bg-white rounded-full shadow-lg flex items-center justify-center hover:bg-yellow-50 transition-colors group"
            >
              <ChevronLeft className="w-6 h-6 text-gray-600 group-hover:text-yellow-600" />
            </button>
            
            <div className="flex space-x-2">
              {testimonials.map((_, index) => (
                <button
                  key={index}
                  onClick={() => setCurrentIndex(index)}
                  className={`w-3 h-3 rounded-full transition-colors ${
                    index === currentIndex ? 'bg-yellow-500' : 'bg-gray-300'
                  }`}
                />
              ))}
            </div>
            
            <button
              onClick={nextSlide}
              className="w-12 h-12 bg-white rounded-full shadow-lg flex items-center justify-center hover:bg-yellow-50 transition-colors group"
            >
              <ChevronRight className="w-6 h-6 text-gray-600 group-hover:text-yellow-600" />
            </button>
          </div>

          {/* Thumbnail previews */}
          <div className="mt-8 grid grid-cols-2 lg:grid-cols-5 gap-4">
            {testimonials.map((testimonial, index) => (
              <button
                key={index}
                onClick={() => setCurrentIndex(index)}
                className={`p-4 rounded-2xl text-center transition-all duration-300 ${
                  index === currentIndex 
                    ? 'bg-gradient-to-br from-yellow-100 to-orange-100 shadow-lg scale-105' 
                    : 'bg-white shadow-md hover:shadow-lg hover:scale-105'
                }`}
              >
                <div className="text-2xl mb-2">{testimonial.avatar}</div>
                <div className="text-sm font-semibold text-gray-800 truncate">{testimonial.name}</div>
                <div className="text-xs text-gray-600 truncate">{testimonial.role}</div>
              </button>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
};

export default Testimonials;
